C++:
====

C++ is a cross platform language that can be used to create high-performance applications.

C++ was developed by Bjane stroustrup, as extension to the C language.

The language was updated 4 major times in 2011, 2014 ,2017 and 2020 to
c++11, C++14, C++17 , C++20.


Why Use C++?
================
C++ is one of the world's most popular programming languages.


C++ can be found in today's operating systems, Graphical User interfaces, and 
embedded systems.



Difference Between C and C++:
=============================

C++ was developed as an extension of C and both languages have almost the same syntax.

The main differences between c and c++ is that C++ support class and Objects,
whilce C does not.



C++ Program execution:
======================

1) A text editor ,like notepad , to write C++ code (save the file with .cpp extension)


2)A compiler ,like  GCC , to translate the C++ code into a langauage that the 
   Computer will understand


steps to compile the Cpp program using gcc compiler
----------------------------------------------------

g++ filename.cpp  ---> 

compiled the program you will get 

 ---> a.exe   in Windows operating system

but in linux  operating system if you compile C++ program
you will get --> a.out file.


to run:
=======

windows -- a.exe enter

linux --  ./a.out enter




C++ Install IDE:
================

AN IDE(Integrated Development Environment)  is used to edit and compile the code

In mark we have popular IDE 

Code::Blocks ,Eclipse,Visual Studio, CLIon..etc


We will use IDE COde::Block IDE  (mingw-setup.exe).



Comments
-------------
Comments can be used to explain C++ code, and to make it more readable. 

It can also be used to prevent execution when testing alternative code. 

Comments can be singled-lined or multi-lined.

Single-line Comments
-----------------------
Single-line comments start with two forward slashes (//).

Any text // and the end of the line is ignored by the compiler (will not be executed).

Multi-line Comments:
--------------------
Multi-line comments start with /* and ends with */.

Any text between /* and */ will be ignored by the compiler.


Basic Data Types
=====================
The data type specifies the size and type of information the variable will store:

DataType	      Size	       	Description
================================================
bool(boolean)	1 byte		Stores true or false values

char		1 byte		Stores a single character/letter/number, or ASCII values (note:- value enclosed in single quote)

int		2 or 4 bytes	Stores whole numbers, without decimals

float		4 bytes		Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits

double	8 bytes		Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits




string : is datatype to store collection of charatcers (note : must include string lib => #include <string>)


C++ Variables:
===============
Variables are containers for storing data values.

Declaring (Creating) Variables
==================================
To create a variable, specify the type and assign it a value:

Syntax:
-------

type variableName = value;



Identifiers:
===============
All C++ variables must be identified with unique names.

These unique names are called identifiers.

Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

Note: It is recommended to use descriptive names in order to create understandable and maintainable code:

The general rules for naming variables are:
============================================
Names can contain letters, digits and underscores
Names must begin with a letter or an underscore (_)
Names are case sensitive (myVar and myvar are different variables)
Names cannot contain whitespaces or special characters like !, #, %, etc.
Reserved words (like C++ keywords, such as int,cout..) cannot be used as names



Constants:
==========
When you do not want others to change existing variable values, use the const keyword (this will declare the variable as "constant", which means unchangeable and read-only.

syntax:
-------
const type variableName=value;


cin:
----
cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

Ex:
---
WAP CPP to read the x and y values from keyboad and display it.


Operators:
----------
Arithmetic operators:- are used to perform common mathematical operations


+   addition 

-   substraction

*   multiplication

/   division   (it return qutioent)

%   modulus  (it will return remainder)

++  increment

--  decrement

Assignement Operators:
======================

(=)Assignment operators are used to assgin values to variables.

int x=10


ex:
==

x=2;

+=   => x+=3   => x=x+3

-=   => x-=3    => x=x-3 (5-3) 


Comparsion Operators:
=====================
==                 equal to    ex: a==b

!=         not  equals to

>        greater than   ex : a>b

<       lesser than    ex: a<b

>=      greater than or equal to ex: a>=b

<=      less than or equal to     ex: a<=b


Logical Operators:
==================
   

&&    logical and    => returns true if both statements are true

||    logical or    => returns trun if one of the statments is true

!     logical not   



Conditional Statements:
=======================

if statement:
============

syntax:
-------

if(condition){

 //block of code to be executed if the condition is true;


}


//if condition is false outside the if block statements will be executed


Ex:
---
Write a cpp program to compare two  numbers by reading values form keyboard using if --statement.



if..else statement:
===================

syntax:
-------

if(condition){

//this block of code to be executed if the condition is true;


}else{

//this block of code to be executed if the condition is false;


}


Ex:
---
Write a cpp program to compare two  numbers by reading values form keyboard using if--else statment.



Multiple Conditions or

if..else if ..statement:
========================

syntax:
--------

if(condition1){

//this block of code will be executed if condition1 is true.

}else if(condition 2){

  this block of code will be executed if the condition1 is false and 
  condition2 is true.
  
}else{

    this block of code will be executed if the condition1 is false and
    condition2 is false.
}


Example:
========

Write a cpp program to compare the three variables using if..else if statement.




Ternary operator:
==================

syntax:

variable = condition?expression1:exression2;

note:
----

if condition true expression1 to be executed.

if condition false expression2 to be executed.


Switch Case:
============

syntax:
=======

switch(expression){

  case value1:  statements;
                break;
  case value2:  statements;
                break;

case value3:  statements;
                break;

case valueN:  statements;
                break;

 default : statments ;(optional)
            

}

Note:
=====

The case value should be an int or char.


Ex:
===
Write a c++ program to perform calucaltion using switch case.



Loops:
======

Loops can execute a block of code as long as a specified condition is true.


While loop
dowhile loop
forloop


while loop:
==========

syntax:
========

intialization 


while(condition){  //untill the condition is true the statements are executed.
  
   statements 
  
 Increment/decrement


}


Ex:
---
Write a c++ program to print 1 to 10 integers.
write a c++ program to print multiplication table of 5.

5 X 1 =5


do-while loop:
=============

syntax:
========

initializtion;

do{

  statements
  increment/decrement;

}while(condition);


note :- the statements are executed atleast one time before checking the condition.

Ex:
---
Write a c++ program to print 1 to 10 integers using do-while.



for Loop:
=========

syntax:

for(initializtion variable;condition,increment/decrement){

// statements
}

example:
=======
Write a c++ program to print 1 to 10 integers using for loop;


break and continue:
===================

break : to break or exit  the loop execution based on condition.

continue: is used to skip an execution of an statement based on condition.



Functions:
------------
A function is a block of code that performs a specific task.

Dividing a complex problem into smaller chunks makes our program easy to understand and reusable.

Ex:

Suppose we need to create a program to create a circle and color it. We can create two functions to solve this problem:

a function to draw the circle
a function to color the circle

There are two types of function:

Standard Library Functions: Predefined in C++
User-defined Function: Created by users


syntax:
=======

returnType functionName(parameter1,paramerters ...N){

   //body of the function.

}
here:
-----
returnType:  int/foat/double/string/void(empty)..


to call a funtion:
===================

int main(){

   funtionName(parameter if any );//calling a function.
}


note:
=====
if function return any value should be store into its return type variable.



Function Declaration and Definition:
====================================

Function Declaration : the return type, the name of the function and parameters(if any).

ex:
----
void greeting();          //function declaration
int addition(int x,int y);


Function Definition:the body of the function (code to be executed)

ex:
---
void greeting(){
    //business logic

}

int addition(int x,int y){

   //business logic.

}

Note:
----

if a user-defined function  such as void greeting() is declared after the main() function ,an error will occur.


However, it is possible to separate the decaration and the definition  of the function  - for code optimization.


Default parameters in Functions:
=======================

we can also use a default parameter value , bu using the equal sign(=)

if we call the function without an argument, it uses the default value.

Note:- A parameter with a default value is often known as an optional parameter.


syntax:
==========


returType functionName(parameter=value,parmeter,,,){

//body of the function.
}


Assignment:
============

what is functionoverloading?
Write a program in C++ to find the sum of the first 10 natural numbers?
Write a program in C++ to check whether a number is prime or not?
Write a program in C++ to find a prime number?
Write a program in C++ to find the sum of the digits of a given number?


Arrays:
=======

C++ provides a data structure, the array , which stores a fixed-size squential collection 
of elements of the same type.

An Array is used to store a collection of data of same type(homogenious elements)


All Arrays consist of contiguous memory locations.


Declaring the arrays :
======================
To delcare an array in C++:

type arrayName[size];


arraySize must be an integer constant greater than 0

type can be any valid C++ datatype.


Ex:
===

int arr[5];

initializing the array:
=======================
 

declare and initialize:

1) int arr[5] = {10,40,20,49,50};


2) int arr[2];

  arr[0]=10;
  arr[1]=29

3) By using forloop we can initialize an array by using keyboard.


Accessing array elements:
========================

An element is accessed by indexing the array.

This is done by placing the index of the element with in square brackets after the the name of the array.


int res = arr[1];

Note:
----

Array index start at 0.


foreach Loop (C++11):
====================
 for-each loop introduced in C++11 version in 2011, which is used 
 exclusively to loop through the elements in an array.


syntax;
------
for(type variableName : arrayName){
   
   //code to be executed.

 }


sizeof() operator :
----------------------
sizeof() operator returns the size of a type in bytes.



Multi-dimensional Array:
-------------------------

syntax for two dimensional array:


returnType arrayName[rowsize][colsize];



C++ String:
===========

String is collection of characters.

There are two two types of string commonly used in C++

1)String that are object of string class(the standard C++ libary string class)

2)C-string (C-style strings)


C-string:
-------

The collection of characters is stored in the form of arrays.

C-strings are array of type char   --> C-string.


Ex:
----

char str[]="c++";

Here str is a string and it holds 4 characters.
Although c++ has 3 charactes the null character \0 is added to the end of the string 
automatically



C++ supports a functions that manipulate the C-string (null-terminated strings).  --library:  include<cstring>
---------------------------------------------------------------------------------
strcpy(s1,s2) :- copyies string s2 into s1;
strcat(s1,s2) :- concatenates string s2 onti the end of string s1
strlen(s1) :- returns the length of the string s1
strcmp(s1,s2)
strchr(s1,s2)
strstr(s1,s2)



Ex:
===
C++ program to display a string enterd by user.






string object:
==============

In c++ we can also create a string object for holding string.

Unlike using char arrays,string objects has no fixed length, and can be extended as per requirement.


to read line of text in string object :
-------------------------------------

getline(cin->inputstream,string variablename as the location of the line to stored);



dereferencing operator:
=========================
The indirection operator (or dereferencing operator) (*) operates on a pointer, 
and returns the value stored in the address kept in the pointer variable. 



Pointers:
=========
In C++, a pointer refers to a variable that holds the address of another variable. Like regular variables, pointers have a data type. 

In C++, a pointer variable refers to a variable pointing to a specific address in a memory pointed by another variable.

For example:

a pointer of type integer can hold the address of a variable of type integer.

A pointer of character type can hold the address of a variable of character type.


Addresses in C++
=================
To understand C++ pointers, you must understand how computers store data.

When you create a variable in your C++ program, it is assigned some space the computer memory. The value of this variable is stored in the assigned location.

To know the location in the computer memory where the data is stored, C++ provides the & (reference) operator. 
The operator returns the address that a variable occupies.

For example, if x is a variable, &x returns the address of the variable.

Pointer Declaration Syntax
==========================
The declaration of C++ takes the following syntax:

datatype *variable_name; 
datatype* variable_name;//prefered.


The datatype is the base type of the pointer which must be a valid C++ data type.
The variable_name is should be the name of the pointer variable.
Asterisk used above for pointer declaration is similar to asterisk used to perform multiplication operation. 
It is the asterisk that marks the variable as a pointer.

Here is an example of valid pointer declarations in C++:

int    *x;    // a pointer to integer
double *x;    // a pointer to double
float  *x;    // a pointer to float
char   *ch     // a pointer to a character


Reference operator (&) and Deference operator (*)
==================================================
The reference operator (&) returns the variable’s address.

The dereference operator (*) helps us get the value that has been stored in a memory address.
The indirection operator (or dereferencing operator) (*) operates on a pointer, 
and returns the value stored in the address kept in the pointer variable. 


For example:

If we have a variable given the name num, stored in the address 0x234 and storing the value 28.

The reference operator (&) will return 0x234.

The dereference operator (*) will return 28


Modifying or changing the pointer:
===================================

we can update the pointer variable.


Note:
----

if updated the pointer variable -> corresponding variable also updated.


C++ pointer and arrays:
=======================
Pointers are variables that hold addresses of the other variables.
Not only can a pointer store the address of a single variable, it can store the
address of cells of an array.

Example:
--------
int *ptr;
int arr[5];   

//arr[0]
//arr[1]
//arr[2]
//arr[3]
//arr[4]
//store the address of the first element of arr in ptr.  

ptr=arr  or ptr=&arr[0]   //it will assign first element cell address into ptr.

Point to every array element:
=============================
if ptr points to first element in the above code then 

ptr+3 will point to the fourth element .


Ex:
===
int *ptr;
int arr[5];   

ptr=arr;   //it is equivalent to &arr[0]

ptr+1 ;   //it is equivalent to &arr[1]
ptr+2 ;   //it is equivalent to &arr[2]
ptr+3 ;   //it is equivalent to &arr[3]
ptr+4 ;   //it is equivalent to &arr[4]


similiary we can access the elements 
using the single pointer.

*ptr==arr[0];

*(ptr+1) //it equivalent to arr[1]
*(ptr+2) //it equivalent to arr[2]
*(ptr+3) //it equivalent to arr[3]
*(ptr+4) //it equivalent to arr[4]


Assignment:
===========
	1)Passing Pointers to Functions
	2)Passing Pointers to Functions
 	3)Pointer to Pointer
	4)Array of Pointers
	5)Null Pointers



To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function.


Classes and Objects:
====================
we learned about functions and variables. Sometimes it's desirable to put related functions and data in one place so that it's logical and easier to work with.

Suppose, we need to store the length, breadth, and height of a rectangular room and calculate its area and volume.

To handle this task, we can create three variables, say, length, breadth, and height along with the functions calculateArea() and calculateVolume().

However, in C++, rather than creating separate variables and functions, we can also wrap these related data and functions in a single place (by creating objects). This programming paradigm is known as object-oriented programming.


But before we can create objects and use them in C++, we first need to learn about classes.


Object:
-------
Object is anything which exist phyiscally in real world which contain properties and actions.

To repressent object Properties and actions(behaviour)  we need class.

Example:
--------
chair is an object ,which contain properties and actions(behaviour)

properties : wheels,handle

actions : movieable,seatAdjustable.

Above properties and actions will represnt in class.

properites we can represent as a variables in class.
actions we can represnt as a funtions in class


class Chair{

   int wheels;   //data memebers
    int handle;  //


     void movieable(){  //memeber functions
         ///logic
     }

    void seatAdjustable(){

      //logice
    }
}





C++ Class
===========
A class is a blueprint for the object.

We can think of a class as a sketch (prototype) of a house. 

It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.

syntax of class:
================
class className {
   // some data members.
   // some member functions
};

C++ Objects
============
When a class is defined, only the specification for the object is defined; no memory or storage is allocated.

To use the data and access functions defined in the class, we need to create objects.

Syntax to Define Object in C++
===============================

className objectVariableName;

Access Data Members and Member Functions:
=========================================

We can access the data members and member functions of a class by using a . (dot) operator. 

objectName.datamember;

objectname.funtionName();


Constructors:
-------------
A constructor is a special type of member function whose name is same as classname.

has the same name as the class

does not have a returntype and  access modifier is public


ex:
===

class Car{

    //defining a constructor
   public:
    
   Car(){

    //here we can write a code to initialize the datamembers.
  }


}

Note:
=====

Constructors will be called automatically when an object is created.


Type of Constructors:
====================
Default Constructor
Parameterised Constructor




Define a function oustide a class
=================================

To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function.


class Ex{

public:
   void methodOne();

};

void Ex::methodOne(){


}


Access Modifiers:
=================
In C++ there are there modifiers:

public: members are accessible from outside the class.

private : members cannot be accessed from outside the class.

protected : members cannot be accessed from outside the class.
            we can be accessed with help of inherited class.


Note:
=====
If don't specify any access modifier in  class,by default all the members  of a class are private.


Encapsulation:
==============
Encapusulation is an object oriented programming concept that binds 
together data and fucntion(class) manipulate the data, and that keeps both safe from
outside inteference and missue. 
Data encapsulation led to the important OOp concept of data hiding.

the meaning of encapsulation is to make sure that sensitive data is hidden from users.
to acheive this you must delcare class members(variables) as private.

we want other to read or modify the private memebrs with the help of  get and set functions.



Inheritance:
============
Inheritance is a processing of acquiring the data members and members functions 
from Parent Class(super) to Child Class(subclass).

inheritance we will use : symbol to derived from base class

It allows us to create a new class(derived class) from an existing class(base class).

The derived class inherits the features from the base class and can have
addiiton feature of its own. 

The avdantage of inheritance code reuseability.

For Example:
=============

class Animal{

    //eat() function
    //sleep() function.

} //base class


class Dog: public Animal{  //dervied class

    //derived the features of Animals class
    //it have its own features.

    //bark() function.

}


inheritance is also know as is-a relation.

we use inheritance only if an is-a relation ship present between
the two class.

examples:
---------
A car is a vehice.

Orange is a fruit.

A dog is an animal


Multiple inheritance:
=====================

one base class one or more derived classes.

class A{

}

class B{

}

class C: public A, public B{

 //derived the features (datamembers and member functions of A and B);

 // it own features.



}

Multilevel inheritance:
=======================

ex:
===

class A {

}

class B: public A{


}

class C: public C{

 

}



Function Overloading:
=====================

A class can contain one or more function with same name but difference in Number of parameters/type of parameters.


Function Overriding:
===================
the same function is defined in both the derived class and the based class.

Now if we call this function using the object of derived class, the function of the derived class is executed.
is called function overriding.


Access overriden function in c++:
================================
1)To access the overriden function of the base class we use the scope resolution operator ::.

 syntax:
  derviedclassobject.BaseclassName::overridenmethod();

2) we can also access the overriden function by using a pointer of the base class to point an object of the
derived class and calling the function that pointer.



Exception handling:
==================

An exception is an unexpected or unwanted event that occurs during program exectuion.

ex:
===
invalid 

div_by_zero=7/0;


In C++ we handle exceptions with the help of try and catch blocks,
along with the throw keyword.


1)try:-- code that may raise an exception.


2)throw :- throws an exception  when an error is detected.


3)catch : code that handles the exception thrown by the throw keyword.


syntax for exception handling:
===============================


try{

  //code that may raise an exception.
  throw argument

}catch(exception ){
   //code to handle exception.

}
















































































